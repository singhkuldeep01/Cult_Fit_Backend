generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// phone no. should be in e.164 format
model users {
  user_id     Int            @id @default(autoincrement())
  email       String         @unique
  name        String         @db.VarChar(100)

  /// Phone number must follow E.164 format (+[country][number], max 15 digits)
  phone_no    String?        @unique @db.VarChar(16)

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // relation field
  roles       users_roles[]
  manager     gym_center[]
  credentials credentials[]
}

model roles {
  role_id     Int          @id @default(autoincrement())
  role_name   String       @unique @db.VarChar(100)
  description String?      @db.VarChar(255)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  users       users_roles[]
}

model users_roles {
  user_id   Int  
  role_id   Int

  // Relations
  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_users_roles_user")
  role roles @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_users_roles_role")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([user_id, role_id])
}

model gym_center {
  center_id   Int      @id @default(autoincrement())
  center_name String   @db.VarChar(100)
  location    String   @db.VarChar(255) 
  contact_no  String   @db.VarChar(16)
  manager_id  Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relation field
  manager          users            @relation(fields: [manager_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_gym_center_manager")
  classes_templates ClassTemplate[]
  class_sessions    ClassSession[]
  recurrence_rules  recurring_class[]
  holidays          center_holiday[]
}

model credentials {
  credential_id  Int          @id @default(autoincrement())
  user_id        Int
  provider       AuthProvider @default(LOCAL)
  hashedPassword String?

  last_login     DateTime? 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // relation
  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_credentials_user")

  @@unique([user_id, provider])
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model ClassTemplate {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  center_id   Int
  capacity    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // relations
  center     gym_center      @relation(fields: [center_id], references: [center_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_class_template_center")
  recurrence recurring_class[]
  sessions   ClassSession[]
}

model recurring_class {
  id              Int           @id @default(autoincrement())
  template_id     Int
  center_id       Int
  daysOfWeek      Json
  recurrenceStart DateTime
  recurrenceEnd   DateTime
  startTime       DateTime
  endTime         DateTime

  // relations
  template ClassTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_recurring_class_template")
  center   gym_center    @relation(fields: [center_id], references: [center_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_recurring_class_center")
  sessions ClassSession[]

  @@unique([template_id, center_id, startTime])
}

model ClassSession {
  id            Int           @id @default(autoincrement())
  template_id   Int
  recurrence_id Int?       
  center_id     Int   
  startDateTime DateTime
  endDateTime   DateTime
  status        SessionStatus @default(SCHEDULED)
  
  // relations
  template   ClassTemplate  @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_class_session_template")
  recurrence recurring_class? @relation(fields: [recurrence_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_class_session_recurrence")
  center     gym_center     @relation(fields: [center_id], references: [center_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_class_session_center")

  @@unique([template_id, startDateTime])
}

model center_holiday {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  center_id Int
  holidayDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  center gym_center @relation(fields: [center_id], references: [center_id])

  @@unique([center_id, holidayDate])
}

enum SessionStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
  GITHUB
}
